{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\willi\\\\OneDrive\\\\Documentos\\\\William\\\\Digital House\\\\FRONT\\\\FRONTENDIII\\\\finalFrontIII\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState, useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE_THEME\":\n      return { ...state,\n        theme: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ContextGlobal = /*#__PURE__*/createContext();\n\nconst ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [dentists, setDentists] = useState([]);\n  const url = 'https://jsonplaceholder.typicode.com/users';\n  const favs = localStorage.getItem('favs') || [];\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(data => setDentists(data));\n  }, []);\n\n  const handleThemeChange = () => {\n    dispatch({\n      type: \"CHANGE_THEME\",\n      payload: state.theme === \"dark\" ? \"\" : \"dark\"\n    });\n  };\n\n  useEffect(() => {\n    document.body.className = state.theme === \"dark\" ? \"dark\" : \"\";\n  }, [state.theme]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      dentists,\n      setDentists,\n      theme: state.theme,\n      handleThemeChange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"ZIRi8U/pnxDWTp9cWNYktQzgvVU=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\nexport const useContextGlobal = () => {\n  _s2();\n\n  return useContext(ContextGlobal);\n};\n\n_s2(useContextGlobal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useReducer","initialState","theme","data","reducer","state","action","type","payload","ContextGlobal","ContextProvider","children","dispatch","dentists","setDentists","url","favs","localStorage","getItem","fetch","then","response","json","handleThemeChange","document","body","className","useContextGlobal"],"sources":["C:/Users/willi/OneDrive/Documentos/William/Digital House/FRONT/FRONTENDIII/finalFrontIII/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useReducer } from \"react\";\n\nexport const initialState = {theme: \"\", data: []}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE_THEME\":\n      return { ...state, theme: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const ContextGlobal = createContext();\n\n\nconst ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [dentists, setDentists] = useState([])\n  const url = 'https://jsonplaceholder.typicode.com/users'\n  const favs = localStorage.getItem('favs') || []\n\n  useEffect(() =>{\n    fetch(url)\n    .then(response => response.json())\n    .then(data => setDentists(data))\n  }, [])\n\n  const handleThemeChange = () => {\n    dispatch({\n      type: \"CHANGE_THEME\",\n      payload: state.theme === \"dark\" ? \"\" : \"dark\",\n    });\n  };\n\n  useEffect(() => {\n    document.body.className = state.theme === \"dark\" ? \"dark\" : \"\";\n  }, [state.theme]);\n  \n\n  return (\n    <ContextGlobal.Provider value={{dentists, setDentists, theme: state.theme, handleThemeChange}}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n\nexport default ContextProvider;\n\nexport const useContextGlobal = () => useContext(ContextGlobal)\n\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,SAA9C,EAAyDC,UAAzD,QAA2E,OAA3E;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAR;EAAYC,IAAI,EAAE;AAAlB,CAArB;;AAEP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACjC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,cAAL;MACE,OAAO,EAAE,GAAGF,KAAL;QAAYH,KAAK,EAAEI,MAAM,CAACE;MAA1B,CAAP;;IACF;MACE,OAAOH,KAAP;EAJJ;AAMD,CAPD;;AASA,OAAO,MAAMI,aAAa,gBAAGb,aAAa,EAAnC;;AAGP,MAAMc,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACxC;EACA,MAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBZ,UAAU,CAACI,OAAD,EAAUH,YAAV,CAApC;EACA,MAAM,CAACY,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAMiB,GAAG,GAAG,4CAAZ;EACA,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgC,EAA7C;EAEAnB,SAAS,CAAC,MAAK;IACboB,KAAK,CAACJ,GAAD,CAAL,CACCK,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMjB,IAAI,IAAIW,WAAW,CAACX,IAAD,CAFzB;EAGD,CAJQ,EAIN,EAJM,CAAT;;EAMA,MAAMoB,iBAAiB,GAAG,MAAM;IAC9BX,QAAQ,CAAC;MACPL,IAAI,EAAE,cADC;MAEPC,OAAO,EAAEH,KAAK,CAACH,KAAN,KAAgB,MAAhB,GAAyB,EAAzB,GAA8B;IAFhC,CAAD,CAAR;EAID,CALD;;EAOAH,SAAS,CAAC,MAAM;IACdyB,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0BrB,KAAK,CAACH,KAAN,KAAgB,MAAhB,GAAyB,MAAzB,GAAkC,EAA5D;EACD,CAFQ,EAEN,CAACG,KAAK,CAACH,KAAP,CAFM,CAAT;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACW,QAAD;MAAWC,WAAX;MAAwBZ,KAAK,EAAEG,KAAK,CAACH,KAArC;MAA4CqB;IAA5C,CAA/B;IAAA,UACGZ;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA9BD;;GAAMD,e;;KAAAA,e;AAgCN,eAAeA,eAAf;AAEA,OAAO,MAAMiB,gBAAgB,GAAG;EAAA;;EAAA,OAAM9B,UAAU,CAACY,aAAD,CAAhB;AAAA,CAAzB;;IAAMkB,gB"},"metadata":{},"sourceType":"module"}